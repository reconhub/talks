ggtitle("CRAN")
# comapre estimate of lm and nls
df$Days <- as.numeric(df$Date - as.Date("1997-04-01"))
m1 <- lm(log(Packages) ~ Days, data = df)
summary(m1)
m2 <- nls(formula = Packages ~ exp(a * Days + b), data = df,
start = c(a = 0.001, b = 3))
summary(m2)
m1 <- lm(log(Packages) ~ Days, data = df)
summary(m1)
m2 <- nls(formula = Packages ~ exp(a * Days + b), data = df,
start = c(a = 0.001, b = 3))
summary(m2)
df$fit1 <- exp(predict(m1))
df$fit2 <- predict(m2)
ggplot(data = df, aes(x = Date, y = Packages)) +
geom_point(aes(color = "observation")) +
geom_line(aes(x = Date, y = fit1, color = "lm")) +
geom_line(aes(x = Date, y = fit2, color = "nls")) +
ylab("Number of Packages") +
scale_color_discrete(name = "Legend") +
ggtitle("CRAN")
plot(m2)
plot(m1)
plot(Days, log(Packages), data = df)
plot(df$Days, log(df$Packages))
plot(m1)
m11 <- lm(log(Packages) ~ Days + I(Days ^ 2), data = df)
summary(m11)
m11 <- lm(log(Packages) ~ poly(Days, 2), data = df)
summary(m11)
?poly
m11 <- lm(log(Packages) ~ Days + I(Days ^ 2), data = df)
plot(m11)
m11 <- lm(log(Packages) ~ poly(Days, 2), data = df)
plot(m11)
# Install packages if you do not have them
install.packages("tripack")
install.packages("spacemakeR",repos="http://R-Forge.R-project.org")
install.packages("AEM",repos="http://R-Forge.R-project.org")
install.packages("tripack")
install.packages("spacemakeR",repos="http://R-Forge.R-project.org")
install.packages("spacemakeR")
install.packages("spacemakeR",repos="http://R-Forge.R-project.org")
install.packages("~/Documents/R/DAE/Lecture9/AEM_0.4-1.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Documents/R/DAE/Lecture9/spacemakeR_0.0-5.tgz", repos = NULL, type = .Platform$pkgType)
library(ape)
library(packfor)
library(spacemakeR)
library(ade4)
library(spdep)
library(vegan)
library(AEM)
library(ncf)
library(car)
library(lmtest)
library(MASS)
library(ape)
library(packfor)
library(spacemakeR)
library(ape)
library(packfor)
library(spacemakeR)
install.packages("spacemakeR",repos="http://R-Forge.R-project.org")
library(spacemakeR)
install.packages("spacemakeR",repos="http://R-Forge.R-project.org")
install.packages("spacemakeR",repos="http://R-Forge.R-project.org")
install.packages("spacemakeR",repos="http://R-Forge.R-project.org")
install.packages("spacemakeR",repos="http://R-Forge.R-project.org")
install.packages("LearnBayes",repos="http://R-Forge.R-project.org")
install.packages("LearnBayes",repos="http://R-Forge.R-project.org")
install.packages("LearnBayes",repos="http://R-Forge.R-project.org")
install.packages("LearnBayes",repos="http://R-Forge.R-project.org")
install.packages("LearnBayes",repos="http://R-Forge.R-project.org")
install.packages("LearnBayes",repos="http://R-Forge.R-project.org")
install.packages("LearnBayes",repos="http://R-Forge.R-project.org")
install.packages("LearnBayes",repos="http://R-Forge.R-project.org")
install.packages("LearnBayes")
library(spacemakeR)
install.packages("AEM",repos="http://R-Forge.R-project.org")
# Load the required packages
# (vegan must be loaded after ade4 to avoid some conflicts)
library(ape)
library(packfor)
library(spacemakeR)
library(ade4)
library(spdep)
library(vegan)
library(AEM)
library(ncf)
library(car)
library(lmtest)
library(MASS)
install.packages("ncf")
install.packages("lmtest")
install.packages("~/Documents/R/DAE/Lecture9/spacemakeR_0.0-5.tar.gzî‚°", repos = NULL, type = "source")
install.packages("~/Documents/R/DAE/Lecture9/spacemakeR_0.0-5.tar.gz", repos = NULL, type = "source")
install.packages("~/Documents/R/DAE/Lecture9/spacemakeR_0.0-5.tar.gz", repos = NULL, type = "source")
remove.packages("spacemakeR")
remove.packages("spdep")
remove.packages("LearnBayes")
install.packages("~/Documents/R/DAE/Lecture9/spacemakeR_0.0-5.tar.gz", repos = NULL, type = "source")
install.packages("~/Documents/R/DAE/Lecture9/spacemakeR_0.0-5.tar.gz", repos = NULL, type = "source")
install.packages("~/Documents/R/DAE/Lecture9/spdep_0.5-92.tar.gz", repos = NULL, type = "source")
install.packages("LearnBayes")
install.packages("~/Documents/R/DAE/Lecture9/spdep_0.5-92.tar.gz", repos = NULL, type = "source")
install.packages("~/Documents/R/DAE/Lecture9/spacemakeR_0.0-5.tar.gz", repos = NULL, type = "source")
install.packages("~/Documents/R/DAE/Lecture9/AEM_0.6.tar.gz", repos = NULL, type = "source")
remove.packages("LearnBayes")
remove.packages("spdep")
remove.packages("spacemakeR")
remove.packages("AEM")
library(ggplot2)
df <- expand.grid(x = 0:5, y = 0:5)
df$z <- runif(nrow(df))
ggplot(df, aes(x, y, fill = z)) +
geom_raster(colour = "white", linewidth = 2, width = .9, height = .9)
df <- expand.grid(x = 0:5, y = 0:5)
df$z <- runif(nrow(df))
ggplot(df, aes(x, y, fill = z)) +
geom_tile(colour = "white", linewidth = 2, width = .5, height = .9)
df <- expand.grid(x = 0:5, y = 0:5)
df$z <- runif(nrow(df))
ggplot(df, aes(x, y, fill = z)) +
geom_tile(colour = "white", linewidth = 2, width = .9, height = .9)
df <- expand.grid(x = 0:5, y = 0:5)
df$z <- runif(nrow(df))
ggplot(df, aes(x, y, fill = z)) +
geom_tile(colour = "white")
packageVersion("ggplot2")
df <- expand.grid(x = 0:5, y = 0:5)
df$z <- runif(nrow(df))
ggplot(df, aes(x, y, fill = z)) +
geom_tile(colour = "white", linewidth = 2, width = .9, height = .9)
install.packages("ggplot2")
# source:https://benjaminlmoore.wordpress.com/2015/04/09/recreating-the-vaccination-heatmaps-in-r/
setwd("~/Documents/TeX/beamer/DrinkHour/data")
library(reshape2)
library(dplyr)
library(ggplot2)
# download data csv from Project Tycho:
#    https://www.tycho.pitt.edu
# Steps:
# Register -> Log in -> Level 1 data ->
# "Search and retreive data" ->
# Options{ geographic level: state,
#           disease outcome: incidence } ->
# Add all states -> "Click here to download results to Excel."
measles <- read.csv("MEASLES_Incidence_1928-2003_20151229224344.csv", skip = 2,
header = TRUE, na.strings = "-")
measles <- melt(measles, id.var = c("YEAR", "WEEK"))
colnames(measles) <- c("year", "week", "state", "cases")
mdf <- measles %>%
group_by(state, year) %>%
summarise(c = if (all(is.na(cases))) NA else sum(cases, na.rm = T))
mdf$state <- factor(mdf$state, levels = rev(levels(mdf$state)))
# from the help page for ?toupper
.simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), tolower(substring(s, 2)),
sep = "", collapse = " ")
}
levels(mdf$state) <- sapply(as.character(levels(mdf$state)),
function(i) .simpleCap(gsub("\\.", " ", i)))
cols <- c(colorRampPalette(c("#e7f0fa", "#c9e2f6", "#95cbee", "#0099dc",
"#4ab04a", "#ffd73e"))(10),
colorRampPalette(c("#eec73a", "#e29421", "#e29421", "#f05336",
"#ce472e"), bias = 2)(90))
ggplot(mdf, aes(y = state, x = year, fill = c)) +
geom_tile(colour = "white", aes(linewidth = 2, width = .9, height = .9)) +
theme_minimal() +
scale_fill_gradientn(colours = cols, limits = c(0, 4000),
breaks = seq(0, 4e3, by = 1e3),
na.value = rgb(246, 246, 246, maxColorValue = 255),
labels = c("0k", "1k", "2k", "3k", "4k"),
guide = guide_colourbar(ticks = T, nbin = 50,
barheight = .5, label = T,
barwidth = 10)) +
scale_x_continuous(expand = c(0, 0), breaks = seq(1930, 2010, by = 10)) +
geom_segment(x = 1963, xend = 1963, y = 0, yend = 51.5, size = .9) +
labs(x = "", y = "", fill = "") +
ggtitle("Measles")
ggplot(mdf, aes(y = state, x = year, fill = c)) +
geom_tile(colour = "white", aes(linewidth = 2, width = .9, height = .9)) +
theme_minimal() +
scale_fill_gradientn(colours = cols, limits = c(0, 4000),
breaks = seq(0, 4e3, by = 1e3),
na.value = rgb(246, 246, 246, maxColorValue = 255),
labels = c("0k", "1k", "2k", "3k", "4k"),
guide = guide_colourbar(ticks = T, nbin = 50,
barheight = .5, label = T,
barwidth = 10)) +
scale_x_continuous(expand = c(0, 0), breaks = seq(1930, 2010, by = 10)) +
geom_segment(x = 1963, xend = 1963, y = 0, yend = 51.5, size = .9) +
labs(x = "", y = "", fill = "") +
ggtitle("Measles") +
theme(legend.position = c(.5, -.13), legend.direction = "horizontal",
legend.text = element_text(colour = "grey20"),
plot.margin = grid::unit(c(.5, .5, 1.5, .5), "cm"),
axis.text.y = element_text(size = 6, family = "Helvetica", hjust = 1),
axis.text.x = element_text(size = 8), axis.ticks.y = element_blank(),
panel.grid = element_blank(),
title = element_text(hjust = -.07, face = "bold", vjust = 1,
family = "Helvetica"),
text = element_text(family = "URWHelvetica"))
ggplot(mdf, aes(y = state, x = year, fill = c)) +
geom_tile(colour = "white", aes(linewidth = 2, width = .9, height = .9)) +
theme_minimal() +
scale_fill_gradientn(colours = cols, limits = c(0, 4000),
breaks = seq(0, 4e3, by = 1e3),
na.value = rgb(246, 246, 246, maxColorValue = 255),
labels = c("0k", "1k", "2k", "3k", "4k"),
guide = guide_colourbar(ticks = T, nbin = 50,
barheight = .5, label = T,
barwidth = 10)) +
scale_x_continuous(expand = c(0, 0), breaks = seq(1930, 2010, by = 10)) +
geom_segment(x = 1963, xend = 1963, y = 0, yend = 51.5, size = .9) +
labs(x = "", y = "", fill = "") +
ggtitle("Measles") +
theme(legend.position = c(.5, -.13), legend.direction = "horizontal",
legend.text = element_text(colour = "grey20"),
plot.margin = grid::unit(c(.5, .5, 1.5, .5), "cm"),
axis.text.y = element_text(size = 6, family = "Helvetica", hjust = 1),
axis.text.x = element_text(size = 8), axis.ticks.y = element_blank(),
panel.grid = element_blank(),
title = element_text(hjust = -.07, face = "bold", vjust = 1,
family = "Helvetica"),
text = element_text(family = "Arial"))
ggplot(mdf, aes(y = state, x = year, fill = c)) +
geom_tile(colour = "white", aes(linewidth = 2, width = .9, height = .9)) +
theme_minimal() +
scale_fill_gradientn(colours = cols, limits = c(0, 4000),
breaks = seq(0, 4e3, by = 1e3),
na.value = rgb(246, 246, 246, maxColorValue = 255),
labels = c("0k", "1k", "2k", "3k", "4k"),
guide = guide_colourbar(ticks = T, nbin = 50,
barheight = .5, label = T,
barwidth = 10)) +
scale_x_continuous(expand = c(0, 0), breaks = seq(1930, 2010, by = 10)) +
geom_segment(x = 1963, xend = 1963, y = 0, yend = 51.5, size = .9) +
labs(x = "", y = "", fill = "") +
ggtitle("Measles") +
theme(legend.position = c(.5, -.13), legend.direction = "horizontal",
legend.text = element_text(colour = "grey20"),
plot.margin = grid::unit(c(.5, .5, 1.5, .5), "cm"),
axis.text.y = element_text(size = 6, family = "Helvetica", hjust = 1),
axis.text.x = element_text(size = 8), axis.ticks.y = element_blank(),
panel.grid = element_blank(),
title = element_text(hjust = -.07, face = "bold", vjust = 1,
family = "Helvetica"),
text = element_text(family = "NimbusSan")) +
annotate("text", label = "Vaccine introduced", x = 1963, y = 53, vjust = 1,
hjust = 0, size = I(3), family = "Helvetica")
fonttable <- read.table(header=TRUE, sep=",", stringsAsFactors=FALSE,
text='
Short,Canonical
mono,Courier
sans,Helvetica
serif,Times
,AvantGarde
,Bookman
,Helvetica-Narrow
,NewCenturySchoolbook
,Palatino
,URWGothic
,URWBookman
,NimbusMon
URWHelvetica,NimbusSan
,NimbusSanCond
,CenturySch
,URWPalladio
URWTimes,NimbusRom
')
fonttable$pos <- 1:nrow(fonttable)
library(reshape2)
fonttable <- melt(fonttable, id.vars="pos", measure.vars=c("Short","Canonical"),
variable.name="NameType", value.name="Font")
# Make a table of faces. Make sure factors are ordered correctly
facetable <- data.frame(Face = factor(c("plain","bold","italic","bold.italic"),
levels = c("plain","bold","italic","bold.italic")))
fullfonts <- merge(fonttable, facetable)
library(ggplot2)
pf <- ggplot(fullfonts, aes(x=NameType, y=pos)) +
geom_text(aes(label=Font, family=Font, fontface=Face)) +
facet_wrap(~ Face, ncol=2)
View(facetable)
ggplot(mdf, aes(y = state, x = year, fill = c)) +
geom_tile(colour = "white", aes(linewidth = 2, width = .9, height = .9)) +
theme_minimal() +
scale_fill_gradientn(colours = cols, limits = c(0, 4000),
breaks = seq(0, 4e3, by = 1e3),
na.value = rgb(246, 246, 246, maxColorValue = 255),
labels = c("0k", "1k", "2k", "3k", "4k"),
guide = guide_colourbar(ticks = T, nbin = 50,
barheight = .5, label = T,
barwidth = 10)) +
scale_x_continuous(expand = c(0, 0), breaks = seq(1930, 2010, by = 10)) +
geom_segment(x = 1963, xend = 1963, y = 0, yend = 51.5, size = .9) +
labs(x = "", y = "", fill = "") +
ggtitle("Measles") +
theme(legend.position = c(.5, -.13), legend.direction = "horizontal",
legend.text = element_text(colour = "grey20"),
plot.margin = grid::unit(c(.5, .5, 1.5, .5), "cm"),
axis.text.y = element_text(size = 6, family = "Helvetica", hjust = 1),
axis.text.x = element_text(size = 8), axis.ticks.y = element_blank(),
panel.grid = element_blank(),
title = element_text(hjust = -.07, face = "bold", vjust = 1,
family = "Helvetica"),
text = element_text(family = "URWHelvetica"))
warnings()
fonttable <- read.table(header=TRUE, sep=",", stringsAsFactors=FALSE,
text='
Short,Canonical,
mono,Courier,
sans,Helvetica,
serif,Times
,AvantGarde
,Bookman
,Helvetica-Narrow
,NewCenturySchoolbook
,Palatino
,URWGothic
,URWBookman
,NimbusMon
URWHelvetica,NimbusSan
,NimbusSanCond
,CenturySch
,URWPalladio
URWTimes,NimbusRom
')
fonttable$pos <- 1:nrow(fonttable)
library(reshape2)
fonttable <- melt(fonttable, id.vars="pos", measure.vars=c("Short","Canonical"),
variable.name="NameType", value.name="Font")
# Make a table of faces. Make sure factors are ordered correctly
facetable <- data.frame(Face = factor(c("plain","bold","italic","bold.italic"),
levels = c("plain","bold","italic","bold.italic")))
fullfonts <- merge(fonttable, facetable)
library(ggplot2)
pf <- ggplot(fullfonts, aes(x=NameType, y=pos)) +
geom_text(aes(label=Font, family=Font, fontface=Face)) +
facet_wrap(~ Face, ncol=2)
View(facetable)
fonttable <- read.table(
header = TRUE,
sep = ",",
stringsAsFactors = FALSE,
text = 'Short,Canonical,mono,Courier,sans,Helvetica,serif,Times
,AvantGarde
,Bookman
,Helvetica-Narrow
,NewCenturySchoolbook
,Palatino
,URWGothic
,URWBookman
,NimbusMon
URWHelvetica,NimbusSan
,NimbusSanCond
,CenturySch
,URWPalladio
URWTimes,NimbusRom
'
)
fonttable$pos <- 1:nrow(fonttable)
library(reshape2)
fonttable <-
melt(
fonttable,
id.vars = "pos",
measure.vars = c("Short", "Canonical"),
variable.name = "NameType",
value.name = "Font"
)
# Make a table of faces. Make sure factors are ordered correctly
facetable <-
data.frame(Face = factor(
c("plain", "bold", "italic", "bold.italic"),
levels = c("plain", "bold", "italic", "bold.italic")
))
fullfonts <- merge(fonttable, facetable)
library(ggplot2)
pf <- ggplot(fullfonts, aes(x = NameType, y = pos)) +
geom_text(aes(
label = Font,
family = Font,
fontface = Face
)) +
facet_wrap( ~ Face, ncol = 2)
?read.table
fonttable <- read.table(header = TRUE, sep = ",", stringsAsFactors = FALSE,
text = "\nShort,Canonical\nmono,Courier\nsans,Helvetica\nserif,Times\n,AvantGarde\n,Bookman\n,Helvetica-Narrow\n,NewCenturySchoolbook\n,Palatino\n,URWGothic\n,URWBookman\n,NimbusMon\nURWHelvetica,NimbusSan\n,NimbusSanCond\n,CenturySch\n,URWPalladio\nURWTimes,NimbusRom\n")
fonttable$pos <- 1:nrow(fonttable)
library(reshape2)
fonttable <- melt(fonttable, id.vars = "pos", measure.vars = c("Short", "Canonical"),
variable.name = "NameType", value.name = "Font")
# Make a table of faces. Make sure factors are ordered correctly
facetable <- data.frame(Face = factor(c("plain", "bold", "italic", "bold.italic"),
levels = c("plain", "bold", "italic", "bold.italic")))
fullfonts <- merge(fonttable, facetable)
library(ggplot2)
pf <- ggplot(fullfonts, aes(x = NameType, y = pos)) + geom_text(aes(label = Font,
family = Font, fontface = Face)) + facet_wrap(~Face, ncol = 2)
pf
warnings()
View(fonttable)
library(extrafont)
font_import(pattern = 'Arch')
loadfonts()
library(extrafont)
install.packages("extrafont")
library(extrafont)
?font_import
font_import()
warnings()
font_import(paths = "/usr/local/share/ghostscript/9.16/Resource/Font")
loadfonts()
fonttable
fonttable()
fonts()
fonttable()
# library(extrafont)
# font_import()
# loadfonts()
# fonts()
# fonttable()
# source:https://benjaminlmoore.wordpress.com/2015/04/09/recreating-the-vaccination-heatmaps-in-r/
setwd("~/Documents/TeX/beamer/DrinkHour/data")
library(reshape2)
library(dplyr)
library(ggplot2)
# download data csv from Project Tycho:
#    https://www.tycho.pitt.edu
# Steps:
# Register -> Log in -> Level 1 data ->
# "Search and retreive data" ->
# Options{ geographic level: state,
#           disease outcome: incidence } ->
# Add all states -> "Click here to download results to Excel."
measles <- read.csv("MEASLES_Incidence_1928-2003_20151229224344.csv", skip = 2,
header = TRUE, na.strings = "-")
measles <- melt(measles, id.var = c("YEAR", "WEEK"))
colnames(measles) <- c("year", "week", "state", "cases")
mdf <- measles %>%
group_by(state, year) %>%
summarise(c = if (all(is.na(cases))) NA else sum(cases, na.rm = T))
mdf$state <- factor(mdf$state, levels = rev(levels(mdf$state)))
# from the help page for ?toupper
.simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), tolower(substring(s, 2)),
sep = "", collapse = " ")
}
levels(mdf$state) <- sapply(as.character(levels(mdf$state)),
function(i) .simpleCap(gsub("\\.", " ", i)))
cols <- c(colorRampPalette(c("#e7f0fa", "#c9e2f6", "#95cbee", "#0099dc",
"#4ab04a", "#ffd73e"))(10),
colorRampPalette(c("#eec73a", "#e29421", "#e29421", "#f05336",
"#ce472e"), bias = 2)(90))
ggplot(mdf, aes(y = state, x = year, fill = c)) +
geom_tile(colour = "white", aes(linewidth = 2, width = .9, height = .9)) +
theme_minimal() +
scale_fill_gradientn(colours = cols, limits = c(0, 4000),
breaks = seq(0, 4e3, by = 1e3),
na.value = rgb(246, 246, 246, maxColorValue = 255),
labels = c("0k", "1k", "2k", "3k", "4k"),
guide = guide_colourbar(ticks = T, nbin = 50,
barheight = .5, label = T,
barwidth = 10)) +
scale_x_continuous(expand = c(0, 0), breaks = seq(1930, 2010, by = 10)) +
geom_segment(x = 1963, xend = 1963, y = 0, yend = 51.5, size = .9) +
labs(x = "", y = "", fill = "") +
ggtitle("Measles") +
theme(legend.position = c(.5, -.13), legend.direction = "horizontal",
legend.text = element_text(colour = "grey20"),
plot.margin = grid::unit(c(.5, .5, 1.5, .5), "cm"),
axis.text.y = element_text(size = 6, family = "Helvetica", hjust = 1),
axis.text.x = element_text(size = 8), axis.ticks.y = element_blank(),
panel.grid = element_blank(),
title = element_text(hjust = -.07, face = "bold", vjust = 1,
family = "Helvetica"),
text = element_text(family = "Helvetica")) +
annotate("text", label = "Vaccine introduced", x = 1963, y = 53, vjust = 1,
hjust = 0, size = I(3), family = "Helvetica")
pdf("measles_incidence_heatmap.pdf", 8, 6)
# to display figure directly, replace URWHelvetica with a font that is from
# Ghostscript, such as Helvetica, Arial
ggplot(mdf, aes(y = state, x = year, fill = c)) +
geom_tile(colour = "white", aes(linewidth = 2, width = .9, height = .9)) +
theme_minimal() +
scale_fill_gradientn(colours = cols, limits = c(0, 4000),
breaks = seq(0, 4e3, by = 1e3),
na.value = rgb(246, 246, 246, maxColorValue = 255),
labels = c("0k", "1k", "2k", "3k", "4k"),
guide = guide_colourbar(ticks = T, nbin = 50,
barheight = .5, label = T,
barwidth = 10)) +
scale_x_continuous(expand = c(0, 0), breaks = seq(1930, 2010, by = 10)) +
geom_segment(x = 1963, xend = 1963, y = 0, yend = 51.5, size = .9) +
labs(x = "", y = "", fill = "") +
ggtitle("Measles") +
theme(legend.position = c(.5, -.13), legend.direction = "horizontal",
legend.text = element_text(colour = "grey20"),
plot.margin = grid::unit(c(.5, .5, 1.5, .5), "cm"),
axis.text.y = element_text(size = 6, family = "Helvetica", hjust = 1),
axis.text.x = element_text(size = 8), axis.ticks.y = element_blank(),
panel.grid = element_blank(),
title = element_text(hjust = -.07, face = "bold", vjust = 1,
family = "Helvetica"),
text = element_text(family = "URWHelvetica")) +
annotate("text", label = "Vaccine introduced", x = 1963, y = 53, vjust = 1,
hjust = 0, size = I(3), family = "Helvetica")
dev.off()
